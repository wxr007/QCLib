// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#ifndef PROTOBUF_task_2eproto__INCLUDED
#define PROTOBUF_task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_task_2eproto();
void protobuf_AssignDesc_task_2eproto();
void protobuf_ShutdownFile_task_2eproto();

class ReqTaskAccept;
class TaskTarget;
class TaskInfo;
class AckTaskAccept;
class AckTaskProgress;
class AckTaskComplete;
class ReqTaskComplete;

// ===================================================================

class ReqTaskAccept : public ::google::protobuf::Message {
 public:
  ReqTaskAccept();
  virtual ~ReqTaskAccept();

  ReqTaskAccept(const ReqTaskAccept& from);

  inline ReqTaskAccept& operator=(const ReqTaskAccept& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqTaskAccept& default_instance();

  void Swap(ReqTaskAccept* other);

  // implements Message ----------------------------------------------

  ReqTaskAccept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqTaskAccept& from);
  void MergeFrom(const ReqTaskAccept& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReqTaskAccept)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static ReqTaskAccept* default_instance_;
};
// -------------------------------------------------------------------

class TaskTarget : public ::google::protobuf::Message {
 public:
  TaskTarget();
  virtual ~TaskTarget();

  TaskTarget(const TaskTarget& from);

  inline TaskTarget& operator=(const TaskTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskTarget& default_instance();

  void Swap(TaskTarget* other);

  // implements Message ----------------------------------------------

  TaskTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskTarget& from);
  void MergeFrom(const TaskTarget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TaskTarget)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static TaskTarget* default_instance_;
};
// -------------------------------------------------------------------

class TaskInfo : public ::google::protobuf::Message {
 public:
  TaskInfo();
  virtual ~TaskInfo();

  TaskInfo(const TaskInfo& from);

  inline TaskInfo& operator=(const TaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskInfo& default_instance();

  void Swap(TaskInfo* other);

  // implements Message ----------------------------------------------

  TaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskInfo& from);
  void MergeFrom(const TaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // repeated .TaskTarget target = 3;
  inline int target_size() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::TaskTarget& target(int index) const;
  inline ::TaskTarget* mutable_target(int index);
  inline ::TaskTarget* add_target();
  inline const ::google::protobuf::RepeatedPtrField< ::TaskTarget >&
      target() const;
  inline ::google::protobuf::RepeatedPtrField< ::TaskTarget >*
      mutable_target();

  // @@protoc_insertion_point(class_scope:TaskInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::TaskTarget > target_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static TaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckTaskAccept : public ::google::protobuf::Message {
 public:
  AckTaskAccept();
  virtual ~AckTaskAccept();

  AckTaskAccept(const AckTaskAccept& from);

  inline AckTaskAccept& operator=(const AckTaskAccept& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckTaskAccept& default_instance();

  void Swap(AckTaskAccept* other);

  // implements Message ----------------------------------------------

  AckTaskAccept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckTaskAccept& from);
  void MergeFrom(const AckTaskAccept& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TaskInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::TaskInfo& info() const;
  inline ::TaskInfo* mutable_info();
  inline ::TaskInfo* release_info();
  inline void set_allocated_info(::TaskInfo* info);

  // @@protoc_insertion_point(class_scope:AckTaskAccept)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TaskInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static AckTaskAccept* default_instance_;
};
// -------------------------------------------------------------------

class AckTaskProgress : public ::google::protobuf::Message {
 public:
  AckTaskProgress();
  virtual ~AckTaskProgress();

  AckTaskProgress(const AckTaskProgress& from);

  inline AckTaskProgress& operator=(const AckTaskProgress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckTaskProgress& default_instance();

  void Swap(AckTaskProgress* other);

  // implements Message ----------------------------------------------

  AckTaskProgress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckTaskProgress& from);
  void MergeFrom(const AckTaskProgress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TaskInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::TaskInfo& info() const;
  inline ::TaskInfo* mutable_info();
  inline ::TaskInfo* release_info();
  inline void set_allocated_info(::TaskInfo* info);

  // @@protoc_insertion_point(class_scope:AckTaskProgress)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TaskInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static AckTaskProgress* default_instance_;
};
// -------------------------------------------------------------------

class AckTaskComplete : public ::google::protobuf::Message {
 public:
  AckTaskComplete();
  virtual ~AckTaskComplete();

  AckTaskComplete(const AckTaskComplete& from);

  inline AckTaskComplete& operator=(const AckTaskComplete& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckTaskComplete& default_instance();

  void Swap(AckTaskComplete* other);

  // implements Message ----------------------------------------------

  AckTaskComplete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckTaskComplete& from);
  void MergeFrom(const AckTaskComplete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AckTaskComplete)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static AckTaskComplete* default_instance_;
};
// -------------------------------------------------------------------

class ReqTaskComplete : public ::google::protobuf::Message {
 public:
  ReqTaskComplete();
  virtual ~ReqTaskComplete();

  ReqTaskComplete(const ReqTaskComplete& from);

  inline ReqTaskComplete& operator=(const ReqTaskComplete& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqTaskComplete& default_instance();

  void Swap(ReqTaskComplete* other);

  // implements Message ----------------------------------------------

  ReqTaskComplete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqTaskComplete& from);
  void MergeFrom(const ReqTaskComplete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReqTaskComplete)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static ReqTaskComplete* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqTaskAccept

// optional int32 id = 1;
inline bool ReqTaskAccept::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqTaskAccept::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqTaskAccept::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqTaskAccept::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReqTaskAccept::id() const {
  return id_;
}
inline void ReqTaskAccept::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// TaskTarget

// optional int32 id = 1;
inline bool TaskTarget::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskTarget::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskTarget::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskTarget::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TaskTarget::id() const {
  return id_;
}
inline void TaskTarget::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 2;
inline bool TaskTarget::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskTarget::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskTarget::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskTarget::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 TaskTarget::count() const {
  return count_;
}
inline void TaskTarget::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 value = 3;
inline bool TaskTarget::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskTarget::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskTarget::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskTarget::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 TaskTarget::value() const {
  return value_;
}
inline void TaskTarget::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// TaskInfo

// optional int32 id = 1;
inline bool TaskInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TaskInfo::id() const {
  return id_;
}
inline void TaskInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 status = 2;
inline bool TaskInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 TaskInfo::status() const {
  return status_;
}
inline void TaskInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// repeated .TaskTarget target = 3;
inline int TaskInfo::target_size() const {
  return target_.size();
}
inline void TaskInfo::clear_target() {
  target_.Clear();
}
inline const ::TaskTarget& TaskInfo::target(int index) const {
  return target_.Get(index);
}
inline ::TaskTarget* TaskInfo::mutable_target(int index) {
  return target_.Mutable(index);
}
inline ::TaskTarget* TaskInfo::add_target() {
  return target_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TaskTarget >&
TaskInfo::target() const {
  return target_;
}
inline ::google::protobuf::RepeatedPtrField< ::TaskTarget >*
TaskInfo::mutable_target() {
  return &target_;
}

// -------------------------------------------------------------------

// AckTaskAccept

// optional .TaskInfo info = 1;
inline bool AckTaskAccept::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckTaskAccept::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckTaskAccept::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckTaskAccept::clear_info() {
  if (info_ != NULL) info_->::TaskInfo::Clear();
  clear_has_info();
}
inline const ::TaskInfo& AckTaskAccept::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::TaskInfo* AckTaskAccept::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::TaskInfo;
  return info_;
}
inline ::TaskInfo* AckTaskAccept::release_info() {
  clear_has_info();
  ::TaskInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void AckTaskAccept::set_allocated_info(::TaskInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// AckTaskProgress

// optional .TaskInfo info = 1;
inline bool AckTaskProgress::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckTaskProgress::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckTaskProgress::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckTaskProgress::clear_info() {
  if (info_ != NULL) info_->::TaskInfo::Clear();
  clear_has_info();
}
inline const ::TaskInfo& AckTaskProgress::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::TaskInfo* AckTaskProgress::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::TaskInfo;
  return info_;
}
inline ::TaskInfo* AckTaskProgress::release_info() {
  clear_has_info();
  ::TaskInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void AckTaskProgress::set_allocated_info(::TaskInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// AckTaskComplete

// optional int32 id = 1;
inline bool AckTaskComplete::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckTaskComplete::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckTaskComplete::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckTaskComplete::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AckTaskComplete::id() const {
  return id_;
}
inline void AckTaskComplete::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 status = 2;
inline bool AckTaskComplete::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckTaskComplete::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckTaskComplete::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckTaskComplete::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 AckTaskComplete::status() const {
  return status_;
}
inline void AckTaskComplete::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// ReqTaskComplete

// optional int32 id = 1;
inline bool ReqTaskComplete::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqTaskComplete::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqTaskComplete::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqTaskComplete::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReqTaskComplete::id() const {
  return id_;
}
inline void ReqTaskComplete::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_task_2eproto__INCLUDED
