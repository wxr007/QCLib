// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class ReqLogin;
class PlayerInfo;
class AckLogin;
class ReqCreateRole;
class AckCreateRole;
class ReqEnterGame;
class AckEnterGame;
class ReqClientReady;
class ReqUserLogout;

// ===================================================================

class ReqLogin : public ::google::protobuf::Message {
 public:
  ReqLogin();
  virtual ~ReqLogin();

  ReqLogin(const ReqLogin& from);

  inline ReqLogin& operator=(const ReqLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLogin& default_instance();

  void Swap(ReqLogin* other);

  // implements Message ----------------------------------------------

  ReqLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLogin& from);
  void MergeFrom(const ReqLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional int64 userId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional int32 serverId = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional string checkKey = 4;
  inline bool has_checkkey() const;
  inline void clear_checkkey();
  static const int kCheckKeyFieldNumber = 4;
  inline const ::std::string& checkkey() const;
  inline void set_checkkey(const ::std::string& value);
  inline void set_checkkey(const char* value);
  inline void set_checkkey(const char* value, size_t size);
  inline ::std::string* mutable_checkkey();
  inline ::std::string* release_checkkey();
  inline void set_allocated_checkkey(::std::string* checkkey);

  // optional int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // repeated .TimeInfo info = 6;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 6;
  inline const ::TimeInfo& info(int index) const;
  inline ::TimeInfo* mutable_info(int index);
  inline ::TimeInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ReqLogin)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_checkkey();
  inline void clear_has_checkkey();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::int64 userid_;
  ::std::string* checkkey_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::RepeatedPtrField< ::TimeInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static ReqLogin* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfo : public ::google::protobuf::Message {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfo& default_instance();

  void Swap(PlayerInfo* other);

  // implements Message ----------------------------------------------

  PlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerName = 1;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 playerLevel = 2;
  inline bool has_playerlevel() const;
  inline void clear_playerlevel();
  static const int kPlayerLevelFieldNumber = 2;
  inline ::google::protobuf::int32 playerlevel() const;
  inline void set_playerlevel(::google::protobuf::int32 value);

  // optional int32 playerJob = 3;
  inline bool has_playerjob() const;
  inline void clear_playerjob();
  static const int kPlayerJobFieldNumber = 3;
  inline ::google::protobuf::int32 playerjob() const;
  inline void set_playerjob(::google::protobuf::int32 value);

  // optional int32 playerCountry = 4;
  inline bool has_playercountry() const;
  inline void clear_playercountry();
  static const int kPlayerCountryFieldNumber = 4;
  inline ::google::protobuf::int32 playercountry() const;
  inline void set_playercountry(::google::protobuf::int32 value);

  // optional int64 playerOnlyId = 5;
  inline bool has_playeronlyid() const;
  inline void clear_playeronlyid();
  static const int kPlayerOnlyIdFieldNumber = 5;
  inline ::google::protobuf::int64 playeronlyid() const;
  inline void set_playeronlyid(::google::protobuf::int64 value);

  // optional int32 mapId = 6;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 6;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional int32 lastLoginTime = 7;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 7;
  inline ::google::protobuf::int32 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerInfo)
 private:
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playerlevel();
  inline void clear_has_playerlevel();
  inline void set_has_playerjob();
  inline void clear_has_playerjob();
  inline void set_has_playercountry();
  inline void clear_has_playercountry();
  inline void set_has_playeronlyid();
  inline void clear_has_playeronlyid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* playername_;
  ::google::protobuf::int32 playerlevel_;
  ::google::protobuf::int32 playerjob_;
  ::google::protobuf::int64 playeronlyid_;
  ::google::protobuf::int32 playercountry_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 lastlogintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckLogin : public ::google::protobuf::Message {
 public:
  AckLogin();
  virtual ~AckLogin();

  AckLogin(const AckLogin& from);

  inline AckLogin& operator=(const AckLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLogin& default_instance();

  void Swap(AckLogin* other);

  // implements Message ----------------------------------------------

  AckLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckLogin& from);
  void MergeFrom(const AckLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 errorCode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // optional int32 playerCount = 2;
  inline bool has_playercount() const;
  inline void clear_playercount();
  static const int kPlayerCountFieldNumber = 2;
  inline ::google::protobuf::int32 playercount() const;
  inline void set_playercount(::google::protobuf::int32 value);

  // repeated .PlayerInfo playerInfoArray = 3;
  inline int playerinfoarray_size() const;
  inline void clear_playerinfoarray();
  static const int kPlayerInfoArrayFieldNumber = 3;
  inline const ::PlayerInfo& playerinfoarray(int index) const;
  inline ::PlayerInfo* mutable_playerinfoarray(int index);
  inline ::PlayerInfo* add_playerinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo >&
      playerinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo >*
      mutable_playerinfoarray();

  // repeated .TimeInfo info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::TimeInfo& info(int index) const;
  inline ::TimeInfo* mutable_info(int index);
  inline ::TimeInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:AckLogin)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_playercount();
  inline void clear_has_playercount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 errorcode_;
  ::google::protobuf::int32 playercount_;
  ::google::protobuf::RepeatedPtrField< ::PlayerInfo > playerinfoarray_;
  ::google::protobuf::RepeatedPtrField< ::TimeInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static AckLogin* default_instance_;
};
// -------------------------------------------------------------------

class ReqCreateRole : public ::google::protobuf::Message {
 public:
  ReqCreateRole();
  virtual ~ReqCreateRole();

  ReqCreateRole(const ReqCreateRole& from);

  inline ReqCreateRole& operator=(const ReqCreateRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCreateRole& default_instance();

  void Swap(ReqCreateRole* other);

  // implements Message ----------------------------------------------

  ReqCreateRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCreateRole& from);
  void MergeFrom(const ReqCreateRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerName = 1;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 playerJob = 2;
  inline bool has_playerjob() const;
  inline void clear_playerjob();
  static const int kPlayerJobFieldNumber = 2;
  inline ::google::protobuf::int32 playerjob() const;
  inline void set_playerjob(::google::protobuf::int32 value);

  // optional int32 playerCountry = 3;
  inline bool has_playercountry() const;
  inline void clear_playercountry();
  static const int kPlayerCountryFieldNumber = 3;
  inline ::google::protobuf::int32 playercountry() const;
  inline void set_playercountry(::google::protobuf::int32 value);

  // repeated .TimeInfo info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::TimeInfo& info(int index) const;
  inline ::TimeInfo* mutable_info(int index);
  inline ::TimeInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ReqCreateRole)
 private:
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playerjob();
  inline void clear_has_playerjob();
  inline void set_has_playercountry();
  inline void clear_has_playercountry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* playername_;
  ::google::protobuf::int32 playerjob_;
  ::google::protobuf::int32 playercountry_;
  ::google::protobuf::RepeatedPtrField< ::TimeInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static ReqCreateRole* default_instance_;
};
// -------------------------------------------------------------------

class AckCreateRole : public ::google::protobuf::Message {
 public:
  AckCreateRole();
  virtual ~AckCreateRole();

  AckCreateRole(const AckCreateRole& from);

  inline AckCreateRole& operator=(const AckCreateRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckCreateRole& default_instance();

  void Swap(AckCreateRole* other);

  // implements Message ----------------------------------------------

  AckCreateRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckCreateRole& from);
  void MergeFrom(const AckCreateRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 errorCode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // optional int32 playerCount = 2;
  inline bool has_playercount() const;
  inline void clear_playercount();
  static const int kPlayerCountFieldNumber = 2;
  inline ::google::protobuf::int32 playercount() const;
  inline void set_playercount(::google::protobuf::int32 value);

  // repeated .PlayerInfo playerInfoArray = 3;
  inline int playerinfoarray_size() const;
  inline void clear_playerinfoarray();
  static const int kPlayerInfoArrayFieldNumber = 3;
  inline const ::PlayerInfo& playerinfoarray(int index) const;
  inline ::PlayerInfo* mutable_playerinfoarray(int index);
  inline ::PlayerInfo* add_playerinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo >&
      playerinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo >*
      mutable_playerinfoarray();

  // repeated .TimeInfo info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::TimeInfo& info(int index) const;
  inline ::TimeInfo* mutable_info(int index);
  inline ::TimeInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:AckCreateRole)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_playercount();
  inline void clear_has_playercount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 errorcode_;
  ::google::protobuf::int32 playercount_;
  ::google::protobuf::RepeatedPtrField< ::PlayerInfo > playerinfoarray_;
  ::google::protobuf::RepeatedPtrField< ::TimeInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static AckCreateRole* default_instance_;
};
// -------------------------------------------------------------------

class ReqEnterGame : public ::google::protobuf::Message {
 public:
  ReqEnterGame();
  virtual ~ReqEnterGame();

  ReqEnterGame(const ReqEnterGame& from);

  inline ReqEnterGame& operator=(const ReqEnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEnterGame& default_instance();

  void Swap(ReqEnterGame* other);

  // implements Message ----------------------------------------------

  ReqEnterGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqEnterGame& from);
  void MergeFrom(const ReqEnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerOnlyId = 1;
  inline bool has_playeronlyid() const;
  inline void clear_playeronlyid();
  static const int kPlayerOnlyIdFieldNumber = 1;
  inline ::google::protobuf::int64 playeronlyid() const;
  inline void set_playeronlyid(::google::protobuf::int64 value);

  // repeated .TimeInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::TimeInfo& info(int index) const;
  inline ::TimeInfo* mutable_info(int index);
  inline ::TimeInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ReqEnterGame)
 private:
  inline void set_has_playeronlyid();
  inline void clear_has_playeronlyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playeronlyid_;
  ::google::protobuf::RepeatedPtrField< ::TimeInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static ReqEnterGame* default_instance_;
};
// -------------------------------------------------------------------

class AckEnterGame : public ::google::protobuf::Message {
 public:
  AckEnterGame();
  virtual ~AckEnterGame();

  AckEnterGame(const AckEnterGame& from);

  inline AckEnterGame& operator=(const AckEnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckEnterGame& default_instance();

  void Swap(AckEnterGame* other);

  // implements Message ----------------------------------------------

  AckEnterGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckEnterGame& from);
  void MergeFrom(const AckEnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 errorCode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // optional int64 tmpId = 2;
  inline bool has_tmpid() const;
  inline void clear_tmpid();
  static const int kTmpIdFieldNumber = 2;
  inline ::google::protobuf::int64 tmpid() const;
  inline void set_tmpid(::google::protobuf::int64 value);

  // repeated .TimeInfo info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::TimeInfo& info(int index) const;
  inline ::TimeInfo* mutable_info(int index);
  inline ::TimeInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:AckEnterGame)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_tmpid();
  inline void clear_has_tmpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 tmpid_;
  ::google::protobuf::RepeatedPtrField< ::TimeInfo > info_;
  ::google::protobuf::int32 errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static AckEnterGame* default_instance_;
};
// -------------------------------------------------------------------

class ReqClientReady : public ::google::protobuf::Message {
 public:
  ReqClientReady();
  virtual ~ReqClientReady();

  ReqClientReady(const ReqClientReady& from);

  inline ReqClientReady& operator=(const ReqClientReady& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqClientReady& default_instance();

  void Swap(ReqClientReady* other);

  // implements Message ----------------------------------------------

  ReqClientReady* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqClientReady& from);
  void MergeFrom(const ReqClientReady& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TimeInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::TimeInfo& info(int index) const;
  inline ::TimeInfo* mutable_info(int index);
  inline ::TimeInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ReqClientReady)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TimeInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static ReqClientReady* default_instance_;
};
// -------------------------------------------------------------------

class ReqUserLogout : public ::google::protobuf::Message {
 public:
  ReqUserLogout();
  virtual ~ReqUserLogout();

  ReqUserLogout(const ReqUserLogout& from);

  inline ReqUserLogout& operator=(const ReqUserLogout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqUserLogout& default_instance();

  void Swap(ReqUserLogout* other);

  // implements Message ----------------------------------------------

  ReqUserLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqUserLogout& from);
  void MergeFrom(const ReqUserLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqUserLogout)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static ReqUserLogout* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqLogin

// optional string account = 1;
inline bool ReqLogin::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLogin::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLogin::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ReqLogin::account() const {
  return *account_;
}
inline void ReqLogin::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void ReqLogin::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void ReqLogin::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqLogin::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* ReqLogin::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqLogin::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 userId = 2;
inline bool ReqLogin::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLogin::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLogin::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLogin::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 ReqLogin::userid() const {
  return userid_;
}
inline void ReqLogin::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 serverId = 3;
inline bool ReqLogin::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqLogin::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqLogin::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqLogin::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 ReqLogin::serverid() const {
  return serverid_;
}
inline void ReqLogin::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional string checkKey = 4;
inline bool ReqLogin::has_checkkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqLogin::set_has_checkkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqLogin::clear_has_checkkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqLogin::clear_checkkey() {
  if (checkkey_ != &::google::protobuf::internal::kEmptyString) {
    checkkey_->clear();
  }
  clear_has_checkkey();
}
inline const ::std::string& ReqLogin::checkkey() const {
  return *checkkey_;
}
inline void ReqLogin::set_checkkey(const ::std::string& value) {
  set_has_checkkey();
  if (checkkey_ == &::google::protobuf::internal::kEmptyString) {
    checkkey_ = new ::std::string;
  }
  checkkey_->assign(value);
}
inline void ReqLogin::set_checkkey(const char* value) {
  set_has_checkkey();
  if (checkkey_ == &::google::protobuf::internal::kEmptyString) {
    checkkey_ = new ::std::string;
  }
  checkkey_->assign(value);
}
inline void ReqLogin::set_checkkey(const char* value, size_t size) {
  set_has_checkkey();
  if (checkkey_ == &::google::protobuf::internal::kEmptyString) {
    checkkey_ = new ::std::string;
  }
  checkkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqLogin::mutable_checkkey() {
  set_has_checkkey();
  if (checkkey_ == &::google::protobuf::internal::kEmptyString) {
    checkkey_ = new ::std::string;
  }
  return checkkey_;
}
inline ::std::string* ReqLogin::release_checkkey() {
  clear_has_checkkey();
  if (checkkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = checkkey_;
    checkkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqLogin::set_allocated_checkkey(::std::string* checkkey) {
  if (checkkey_ != &::google::protobuf::internal::kEmptyString) {
    delete checkkey_;
  }
  if (checkkey) {
    set_has_checkkey();
    checkkey_ = checkkey;
  } else {
    clear_has_checkkey();
    checkkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 time = 5;
inline bool ReqLogin::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqLogin::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqLogin::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqLogin::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ReqLogin::time() const {
  return time_;
}
inline void ReqLogin::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// repeated .TimeInfo info = 6;
inline int ReqLogin::info_size() const {
  return info_.size();
}
inline void ReqLogin::clear_info() {
  info_.Clear();
}
inline const ::TimeInfo& ReqLogin::info(int index) const {
  return info_.Get(index);
}
inline ::TimeInfo* ReqLogin::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::TimeInfo* ReqLogin::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
ReqLogin::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
ReqLogin::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// PlayerInfo

// optional string playerName = 1;
inline bool PlayerInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& PlayerInfo::playername() const {
  return *playername_;
}
inline void PlayerInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void PlayerInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void PlayerInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* PlayerInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 playerLevel = 2;
inline bool PlayerInfo::has_playerlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfo::set_has_playerlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfo::clear_has_playerlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfo::clear_playerlevel() {
  playerlevel_ = 0;
  clear_has_playerlevel();
}
inline ::google::protobuf::int32 PlayerInfo::playerlevel() const {
  return playerlevel_;
}
inline void PlayerInfo::set_playerlevel(::google::protobuf::int32 value) {
  set_has_playerlevel();
  playerlevel_ = value;
}

// optional int32 playerJob = 3;
inline bool PlayerInfo::has_playerjob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInfo::set_has_playerjob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInfo::clear_has_playerjob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInfo::clear_playerjob() {
  playerjob_ = 0;
  clear_has_playerjob();
}
inline ::google::protobuf::int32 PlayerInfo::playerjob() const {
  return playerjob_;
}
inline void PlayerInfo::set_playerjob(::google::protobuf::int32 value) {
  set_has_playerjob();
  playerjob_ = value;
}

// optional int32 playerCountry = 4;
inline bool PlayerInfo::has_playercountry() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInfo::set_has_playercountry() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInfo::clear_has_playercountry() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInfo::clear_playercountry() {
  playercountry_ = 0;
  clear_has_playercountry();
}
inline ::google::protobuf::int32 PlayerInfo::playercountry() const {
  return playercountry_;
}
inline void PlayerInfo::set_playercountry(::google::protobuf::int32 value) {
  set_has_playercountry();
  playercountry_ = value;
}

// optional int64 playerOnlyId = 5;
inline bool PlayerInfo::has_playeronlyid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInfo::set_has_playeronlyid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInfo::clear_has_playeronlyid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInfo::clear_playeronlyid() {
  playeronlyid_ = GOOGLE_LONGLONG(0);
  clear_has_playeronlyid();
}
inline ::google::protobuf::int64 PlayerInfo::playeronlyid() const {
  return playeronlyid_;
}
inline void PlayerInfo::set_playeronlyid(::google::protobuf::int64 value) {
  set_has_playeronlyid();
  playeronlyid_ = value;
}

// optional int32 mapId = 6;
inline bool PlayerInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerInfo::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 PlayerInfo::mapid() const {
  return mapid_;
}
inline void PlayerInfo::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional int32 lastLoginTime = 7;
inline bool PlayerInfo::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerInfo::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerInfo::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerInfo::clear_lastlogintime() {
  lastlogintime_ = 0;
  clear_has_lastlogintime();
}
inline ::google::protobuf::int32 PlayerInfo::lastlogintime() const {
  return lastlogintime_;
}
inline void PlayerInfo::set_lastlogintime(::google::protobuf::int32 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// -------------------------------------------------------------------

// AckLogin

// optional int32 errorCode = 1;
inline bool AckLogin::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckLogin::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckLogin::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckLogin::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 AckLogin::errorcode() const {
  return errorcode_;
}
inline void AckLogin::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional int32 playerCount = 2;
inline bool AckLogin::has_playercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckLogin::set_has_playercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckLogin::clear_has_playercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckLogin::clear_playercount() {
  playercount_ = 0;
  clear_has_playercount();
}
inline ::google::protobuf::int32 AckLogin::playercount() const {
  return playercount_;
}
inline void AckLogin::set_playercount(::google::protobuf::int32 value) {
  set_has_playercount();
  playercount_ = value;
}

// repeated .PlayerInfo playerInfoArray = 3;
inline int AckLogin::playerinfoarray_size() const {
  return playerinfoarray_.size();
}
inline void AckLogin::clear_playerinfoarray() {
  playerinfoarray_.Clear();
}
inline const ::PlayerInfo& AckLogin::playerinfoarray(int index) const {
  return playerinfoarray_.Get(index);
}
inline ::PlayerInfo* AckLogin::mutable_playerinfoarray(int index) {
  return playerinfoarray_.Mutable(index);
}
inline ::PlayerInfo* AckLogin::add_playerinfoarray() {
  return playerinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo >&
AckLogin::playerinfoarray() const {
  return playerinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo >*
AckLogin::mutable_playerinfoarray() {
  return &playerinfoarray_;
}

// repeated .TimeInfo info = 4;
inline int AckLogin::info_size() const {
  return info_.size();
}
inline void AckLogin::clear_info() {
  info_.Clear();
}
inline const ::TimeInfo& AckLogin::info(int index) const {
  return info_.Get(index);
}
inline ::TimeInfo* AckLogin::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::TimeInfo* AckLogin::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
AckLogin::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
AckLogin::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// ReqCreateRole

// optional string playerName = 1;
inline bool ReqCreateRole::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCreateRole::set_has_playername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCreateRole::clear_has_playername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCreateRole::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& ReqCreateRole::playername() const {
  return *playername_;
}
inline void ReqCreateRole::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void ReqCreateRole::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void ReqCreateRole::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqCreateRole::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* ReqCreateRole::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqCreateRole::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 playerJob = 2;
inline bool ReqCreateRole::has_playerjob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqCreateRole::set_has_playerjob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqCreateRole::clear_has_playerjob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqCreateRole::clear_playerjob() {
  playerjob_ = 0;
  clear_has_playerjob();
}
inline ::google::protobuf::int32 ReqCreateRole::playerjob() const {
  return playerjob_;
}
inline void ReqCreateRole::set_playerjob(::google::protobuf::int32 value) {
  set_has_playerjob();
  playerjob_ = value;
}

// optional int32 playerCountry = 3;
inline bool ReqCreateRole::has_playercountry() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqCreateRole::set_has_playercountry() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqCreateRole::clear_has_playercountry() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqCreateRole::clear_playercountry() {
  playercountry_ = 0;
  clear_has_playercountry();
}
inline ::google::protobuf::int32 ReqCreateRole::playercountry() const {
  return playercountry_;
}
inline void ReqCreateRole::set_playercountry(::google::protobuf::int32 value) {
  set_has_playercountry();
  playercountry_ = value;
}

// repeated .TimeInfo info = 4;
inline int ReqCreateRole::info_size() const {
  return info_.size();
}
inline void ReqCreateRole::clear_info() {
  info_.Clear();
}
inline const ::TimeInfo& ReqCreateRole::info(int index) const {
  return info_.Get(index);
}
inline ::TimeInfo* ReqCreateRole::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::TimeInfo* ReqCreateRole::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
ReqCreateRole::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
ReqCreateRole::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// AckCreateRole

// optional int32 errorCode = 1;
inline bool AckCreateRole::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckCreateRole::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckCreateRole::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckCreateRole::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 AckCreateRole::errorcode() const {
  return errorcode_;
}
inline void AckCreateRole::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional int32 playerCount = 2;
inline bool AckCreateRole::has_playercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckCreateRole::set_has_playercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckCreateRole::clear_has_playercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckCreateRole::clear_playercount() {
  playercount_ = 0;
  clear_has_playercount();
}
inline ::google::protobuf::int32 AckCreateRole::playercount() const {
  return playercount_;
}
inline void AckCreateRole::set_playercount(::google::protobuf::int32 value) {
  set_has_playercount();
  playercount_ = value;
}

// repeated .PlayerInfo playerInfoArray = 3;
inline int AckCreateRole::playerinfoarray_size() const {
  return playerinfoarray_.size();
}
inline void AckCreateRole::clear_playerinfoarray() {
  playerinfoarray_.Clear();
}
inline const ::PlayerInfo& AckCreateRole::playerinfoarray(int index) const {
  return playerinfoarray_.Get(index);
}
inline ::PlayerInfo* AckCreateRole::mutable_playerinfoarray(int index) {
  return playerinfoarray_.Mutable(index);
}
inline ::PlayerInfo* AckCreateRole::add_playerinfoarray() {
  return playerinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo >&
AckCreateRole::playerinfoarray() const {
  return playerinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo >*
AckCreateRole::mutable_playerinfoarray() {
  return &playerinfoarray_;
}

// repeated .TimeInfo info = 4;
inline int AckCreateRole::info_size() const {
  return info_.size();
}
inline void AckCreateRole::clear_info() {
  info_.Clear();
}
inline const ::TimeInfo& AckCreateRole::info(int index) const {
  return info_.Get(index);
}
inline ::TimeInfo* AckCreateRole::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::TimeInfo* AckCreateRole::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
AckCreateRole::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
AckCreateRole::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// ReqEnterGame

// optional int64 playerOnlyId = 1;
inline bool ReqEnterGame::has_playeronlyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqEnterGame::set_has_playeronlyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqEnterGame::clear_has_playeronlyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqEnterGame::clear_playeronlyid() {
  playeronlyid_ = GOOGLE_LONGLONG(0);
  clear_has_playeronlyid();
}
inline ::google::protobuf::int64 ReqEnterGame::playeronlyid() const {
  return playeronlyid_;
}
inline void ReqEnterGame::set_playeronlyid(::google::protobuf::int64 value) {
  set_has_playeronlyid();
  playeronlyid_ = value;
}

// repeated .TimeInfo info = 2;
inline int ReqEnterGame::info_size() const {
  return info_.size();
}
inline void ReqEnterGame::clear_info() {
  info_.Clear();
}
inline const ::TimeInfo& ReqEnterGame::info(int index) const {
  return info_.Get(index);
}
inline ::TimeInfo* ReqEnterGame::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::TimeInfo* ReqEnterGame::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
ReqEnterGame::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
ReqEnterGame::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// AckEnterGame

// optional int32 errorCode = 1;
inline bool AckEnterGame::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckEnterGame::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckEnterGame::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckEnterGame::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 AckEnterGame::errorcode() const {
  return errorcode_;
}
inline void AckEnterGame::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional int64 tmpId = 2;
inline bool AckEnterGame::has_tmpid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckEnterGame::set_has_tmpid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckEnterGame::clear_has_tmpid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckEnterGame::clear_tmpid() {
  tmpid_ = GOOGLE_LONGLONG(0);
  clear_has_tmpid();
}
inline ::google::protobuf::int64 AckEnterGame::tmpid() const {
  return tmpid_;
}
inline void AckEnterGame::set_tmpid(::google::protobuf::int64 value) {
  set_has_tmpid();
  tmpid_ = value;
}

// repeated .TimeInfo info = 3;
inline int AckEnterGame::info_size() const {
  return info_.size();
}
inline void AckEnterGame::clear_info() {
  info_.Clear();
}
inline const ::TimeInfo& AckEnterGame::info(int index) const {
  return info_.Get(index);
}
inline ::TimeInfo* AckEnterGame::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::TimeInfo* AckEnterGame::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
AckEnterGame::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
AckEnterGame::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// ReqClientReady

// repeated .TimeInfo info = 1;
inline int ReqClientReady::info_size() const {
  return info_.size();
}
inline void ReqClientReady::clear_info() {
  info_.Clear();
}
inline const ::TimeInfo& ReqClientReady::info(int index) const {
  return info_.Get(index);
}
inline ::TimeInfo* ReqClientReady::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::TimeInfo* ReqClientReady::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
ReqClientReady::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
ReqClientReady::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// ReqUserLogout


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
