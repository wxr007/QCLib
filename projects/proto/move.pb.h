// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: move.proto

#ifndef PROTOBUF_move_2eproto__INCLUDED
#define PROTOBUF_move_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_move_2eproto();
void protobuf_AssignDesc_move_2eproto();
void protobuf_ShutdownFile_move_2eproto();

class ReqMove;
class MapLocation;
class AckMove;
class MapAddObject;
class MapDelObject;

// ===================================================================

class ReqMove : public ::google::protobuf::Message {
 public:
  ReqMove();
  virtual ~ReqMove();

  ReqMove(const ReqMove& from);

  inline ReqMove& operator=(const ReqMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqMove& default_instance();

  void Swap(ReqMove* other);

  // implements Message ----------------------------------------------

  ReqMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqMove& from);
  void MergeFrom(const ReqMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 curx = 1;
  inline bool has_curx() const;
  inline void clear_curx();
  static const int kCurxFieldNumber = 1;
  inline ::google::protobuf::int32 curx() const;
  inline void set_curx(::google::protobuf::int32 value);

  // optional int32 cury = 2;
  inline bool has_cury() const;
  inline void clear_cury();
  static const int kCuryFieldNumber = 2;
  inline ::google::protobuf::int32 cury() const;
  inline void set_cury(::google::protobuf::int32 value);

  // optional int32 pixelx = 3;
  inline bool has_pixelx() const;
  inline void clear_pixelx();
  static const int kPixelxFieldNumber = 3;
  inline ::google::protobuf::int32 pixelx() const;
  inline void set_pixelx(::google::protobuf::int32 value);

  // optional int32 pixely = 4;
  inline bool has_pixely() const;
  inline void clear_pixely();
  static const int kPixelyFieldNumber = 4;
  inline ::google::protobuf::int32 pixely() const;
  inline void set_pixely(::google::protobuf::int32 value);

  // repeated .TimeInfo info = 5;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::TimeInfo& info(int index) const;
  inline ::TimeInfo* mutable_info(int index);
  inline ::TimeInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ReqMove)
 private:
  inline void set_has_curx();
  inline void clear_has_curx();
  inline void set_has_cury();
  inline void clear_has_cury();
  inline void set_has_pixelx();
  inline void clear_has_pixelx();
  inline void set_has_pixely();
  inline void clear_has_pixely();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 curx_;
  ::google::protobuf::int32 cury_;
  ::google::protobuf::int32 pixelx_;
  ::google::protobuf::int32 pixely_;
  ::google::protobuf::RepeatedPtrField< ::TimeInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_move_2eproto();
  friend void protobuf_AssignDesc_move_2eproto();
  friend void protobuf_ShutdownFile_move_2eproto();

  void InitAsDefaultInstance();
  static ReqMove* default_instance_;
};
// -------------------------------------------------------------------

class MapLocation : public ::google::protobuf::Message {
 public:
  MapLocation();
  virtual ~MapLocation();

  MapLocation(const MapLocation& from);

  inline MapLocation& operator=(const MapLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapLocation& default_instance();

  void Swap(MapLocation* other);

  // implements Message ----------------------------------------------

  MapLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapLocation& from);
  void MergeFrom(const MapLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 mapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // optional int32 curx = 2;
  inline bool has_curx() const;
  inline void clear_curx();
  static const int kCurxFieldNumber = 2;
  inline ::google::protobuf::int32 curx() const;
  inline void set_curx(::google::protobuf::int32 value);

  // optional int32 cury = 3;
  inline bool has_cury() const;
  inline void clear_cury();
  static const int kCuryFieldNumber = 3;
  inline ::google::protobuf::int32 cury() const;
  inline void set_cury(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MapLocation)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_curx();
  inline void clear_has_curx();
  inline void set_has_cury();
  inline void clear_has_cury();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mapid_;
  ::google::protobuf::int32 curx_;
  ::google::protobuf::int32 cury_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_move_2eproto();
  friend void protobuf_AssignDesc_move_2eproto();
  friend void protobuf_ShutdownFile_move_2eproto();

  void InitAsDefaultInstance();
  static MapLocation* default_instance_;
};
// -------------------------------------------------------------------

class AckMove : public ::google::protobuf::Message {
 public:
  AckMove();
  virtual ~AckMove();

  AckMove(const AckMove& from);

  inline AckMove& operator=(const AckMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckMove& default_instance();

  void Swap(AckMove* other);

  // implements Message ----------------------------------------------

  AckMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckMove& from);
  void MergeFrom(const AckMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 errorCode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // optional int32 pixelx = 2;
  inline bool has_pixelx() const;
  inline void clear_pixelx();
  static const int kPixelxFieldNumber = 2;
  inline ::google::protobuf::int32 pixelx() const;
  inline void set_pixelx(::google::protobuf::int32 value);

  // optional int32 pixely = 3;
  inline bool has_pixely() const;
  inline void clear_pixely();
  static const int kPixelyFieldNumber = 3;
  inline ::google::protobuf::int32 pixely() const;
  inline void set_pixely(::google::protobuf::int32 value);

  // optional int64 tmpId = 4;
  inline bool has_tmpid() const;
  inline void clear_tmpid();
  static const int kTmpIdFieldNumber = 4;
  inline ::google::protobuf::int64 tmpid() const;
  inline void set_tmpid(::google::protobuf::int64 value);

  // optional .MapLocation location = 5;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 5;
  inline const ::MapLocation& location() const;
  inline ::MapLocation* mutable_location();
  inline ::MapLocation* release_location();
  inline void set_allocated_location(::MapLocation* location);

  // repeated .TimeInfo info = 6;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 6;
  inline const ::TimeInfo& info(int index) const;
  inline ::TimeInfo* mutable_info(int index);
  inline ::TimeInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:AckMove)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_pixelx();
  inline void clear_has_pixelx();
  inline void set_has_pixely();
  inline void clear_has_pixely();
  inline void set_has_tmpid();
  inline void clear_has_tmpid();
  inline void set_has_location();
  inline void clear_has_location();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 errorcode_;
  ::google::protobuf::int32 pixelx_;
  ::google::protobuf::int64 tmpid_;
  ::MapLocation* location_;
  ::google::protobuf::RepeatedPtrField< ::TimeInfo > info_;
  ::google::protobuf::int32 pixely_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_move_2eproto();
  friend void protobuf_AssignDesc_move_2eproto();
  friend void protobuf_ShutdownFile_move_2eproto();

  void InitAsDefaultInstance();
  static AckMove* default_instance_;
};
// -------------------------------------------------------------------

class MapAddObject : public ::google::protobuf::Message {
 public:
  MapAddObject();
  virtual ~MapAddObject();

  MapAddObject(const MapAddObject& from);

  inline MapAddObject& operator=(const MapAddObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapAddObject& default_instance();

  void Swap(MapAddObject* other);

  // implements Message ----------------------------------------------

  MapAddObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapAddObject& from);
  void MergeFrom(const MapAddObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dir = 1;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 1;
  inline ::google::protobuf::int32 dir() const;
  inline void set_dir(::google::protobuf::int32 value);

  // optional int32 curx = 2;
  inline bool has_curx() const;
  inline void clear_curx();
  static const int kCurxFieldNumber = 2;
  inline ::google::protobuf::int32 curx() const;
  inline void set_curx(::google::protobuf::int32 value);

  // optional int32 cury = 3;
  inline bool has_cury() const;
  inline void clear_cury();
  static const int kCuryFieldNumber = 3;
  inline ::google::protobuf::int32 cury() const;
  inline void set_cury(::google::protobuf::int32 value);

  // optional int32 pixelx = 4;
  inline bool has_pixelx() const;
  inline void clear_pixelx();
  static const int kPixelxFieldNumber = 4;
  inline ::google::protobuf::int32 pixelx() const;
  inline void set_pixelx(::google::protobuf::int32 value);

  // optional int32 pixely = 5;
  inline bool has_pixely() const;
  inline void clear_pixely();
  static const int kPixelyFieldNumber = 5;
  inline ::google::protobuf::int32 pixely() const;
  inline void set_pixely(::google::protobuf::int32 value);

  // optional int64 tmpId = 6;
  inline bool has_tmpid() const;
  inline void clear_tmpid();
  static const int kTmpIdFieldNumber = 6;
  inline ::google::protobuf::int64 tmpid() const;
  inline void set_tmpid(::google::protobuf::int64 value);

  // repeated .TimeInfo info = 7;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 7;
  inline const ::TimeInfo& info(int index) const;
  inline ::TimeInfo* mutable_info(int index);
  inline ::TimeInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:MapAddObject)
 private:
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_curx();
  inline void clear_has_curx();
  inline void set_has_cury();
  inline void clear_has_cury();
  inline void set_has_pixelx();
  inline void clear_has_pixelx();
  inline void set_has_pixely();
  inline void clear_has_pixely();
  inline void set_has_tmpid();
  inline void clear_has_tmpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dir_;
  ::google::protobuf::int32 curx_;
  ::google::protobuf::int32 cury_;
  ::google::protobuf::int32 pixelx_;
  ::google::protobuf::int64 tmpid_;
  ::google::protobuf::RepeatedPtrField< ::TimeInfo > info_;
  ::google::protobuf::int32 pixely_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_move_2eproto();
  friend void protobuf_AssignDesc_move_2eproto();
  friend void protobuf_ShutdownFile_move_2eproto();

  void InitAsDefaultInstance();
  static MapAddObject* default_instance_;
};
// -------------------------------------------------------------------

class MapDelObject : public ::google::protobuf::Message {
 public:
  MapDelObject();
  virtual ~MapDelObject();

  MapDelObject(const MapDelObject& from);

  inline MapDelObject& operator=(const MapDelObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapDelObject& default_instance();

  void Swap(MapDelObject* other);

  // implements Message ----------------------------------------------

  MapDelObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapDelObject& from);
  void MergeFrom(const MapDelObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 tmpId = 1;
  inline bool has_tmpid() const;
  inline void clear_tmpid();
  static const int kTmpIdFieldNumber = 1;
  inline ::google::protobuf::int64 tmpid() const;
  inline void set_tmpid(::google::protobuf::int64 value);

  // repeated .TimeInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::TimeInfo& info(int index) const;
  inline ::TimeInfo* mutable_info(int index);
  inline ::TimeInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:MapDelObject)
 private:
  inline void set_has_tmpid();
  inline void clear_has_tmpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 tmpid_;
  ::google::protobuf::RepeatedPtrField< ::TimeInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_move_2eproto();
  friend void protobuf_AssignDesc_move_2eproto();
  friend void protobuf_ShutdownFile_move_2eproto();

  void InitAsDefaultInstance();
  static MapDelObject* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqMove

// optional int32 curx = 1;
inline bool ReqMove::has_curx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqMove::set_has_curx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqMove::clear_has_curx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqMove::clear_curx() {
  curx_ = 0;
  clear_has_curx();
}
inline ::google::protobuf::int32 ReqMove::curx() const {
  return curx_;
}
inline void ReqMove::set_curx(::google::protobuf::int32 value) {
  set_has_curx();
  curx_ = value;
}

// optional int32 cury = 2;
inline bool ReqMove::has_cury() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqMove::set_has_cury() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqMove::clear_has_cury() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqMove::clear_cury() {
  cury_ = 0;
  clear_has_cury();
}
inline ::google::protobuf::int32 ReqMove::cury() const {
  return cury_;
}
inline void ReqMove::set_cury(::google::protobuf::int32 value) {
  set_has_cury();
  cury_ = value;
}

// optional int32 pixelx = 3;
inline bool ReqMove::has_pixelx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqMove::set_has_pixelx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqMove::clear_has_pixelx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqMove::clear_pixelx() {
  pixelx_ = 0;
  clear_has_pixelx();
}
inline ::google::protobuf::int32 ReqMove::pixelx() const {
  return pixelx_;
}
inline void ReqMove::set_pixelx(::google::protobuf::int32 value) {
  set_has_pixelx();
  pixelx_ = value;
}

// optional int32 pixely = 4;
inline bool ReqMove::has_pixely() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqMove::set_has_pixely() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqMove::clear_has_pixely() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqMove::clear_pixely() {
  pixely_ = 0;
  clear_has_pixely();
}
inline ::google::protobuf::int32 ReqMove::pixely() const {
  return pixely_;
}
inline void ReqMove::set_pixely(::google::protobuf::int32 value) {
  set_has_pixely();
  pixely_ = value;
}

// repeated .TimeInfo info = 5;
inline int ReqMove::info_size() const {
  return info_.size();
}
inline void ReqMove::clear_info() {
  info_.Clear();
}
inline const ::TimeInfo& ReqMove::info(int index) const {
  return info_.Get(index);
}
inline ::TimeInfo* ReqMove::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::TimeInfo* ReqMove::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
ReqMove::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
ReqMove::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// MapLocation

// optional int64 mapId = 1;
inline bool MapLocation::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapLocation::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapLocation::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapLocation::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::int64 MapLocation::mapid() const {
  return mapid_;
}
inline void MapLocation::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional int32 curx = 2;
inline bool MapLocation::has_curx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapLocation::set_has_curx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapLocation::clear_has_curx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapLocation::clear_curx() {
  curx_ = 0;
  clear_has_curx();
}
inline ::google::protobuf::int32 MapLocation::curx() const {
  return curx_;
}
inline void MapLocation::set_curx(::google::protobuf::int32 value) {
  set_has_curx();
  curx_ = value;
}

// optional int32 cury = 3;
inline bool MapLocation::has_cury() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapLocation::set_has_cury() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapLocation::clear_has_cury() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapLocation::clear_cury() {
  cury_ = 0;
  clear_has_cury();
}
inline ::google::protobuf::int32 MapLocation::cury() const {
  return cury_;
}
inline void MapLocation::set_cury(::google::protobuf::int32 value) {
  set_has_cury();
  cury_ = value;
}

// -------------------------------------------------------------------

// AckMove

// optional int32 errorCode = 1;
inline bool AckMove::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckMove::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckMove::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckMove::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 AckMove::errorcode() const {
  return errorcode_;
}
inline void AckMove::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional int32 pixelx = 2;
inline bool AckMove::has_pixelx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckMove::set_has_pixelx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckMove::clear_has_pixelx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckMove::clear_pixelx() {
  pixelx_ = 0;
  clear_has_pixelx();
}
inline ::google::protobuf::int32 AckMove::pixelx() const {
  return pixelx_;
}
inline void AckMove::set_pixelx(::google::protobuf::int32 value) {
  set_has_pixelx();
  pixelx_ = value;
}

// optional int32 pixely = 3;
inline bool AckMove::has_pixely() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckMove::set_has_pixely() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckMove::clear_has_pixely() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckMove::clear_pixely() {
  pixely_ = 0;
  clear_has_pixely();
}
inline ::google::protobuf::int32 AckMove::pixely() const {
  return pixely_;
}
inline void AckMove::set_pixely(::google::protobuf::int32 value) {
  set_has_pixely();
  pixely_ = value;
}

// optional int64 tmpId = 4;
inline bool AckMove::has_tmpid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckMove::set_has_tmpid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckMove::clear_has_tmpid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckMove::clear_tmpid() {
  tmpid_ = GOOGLE_LONGLONG(0);
  clear_has_tmpid();
}
inline ::google::protobuf::int64 AckMove::tmpid() const {
  return tmpid_;
}
inline void AckMove::set_tmpid(::google::protobuf::int64 value) {
  set_has_tmpid();
  tmpid_ = value;
}

// optional .MapLocation location = 5;
inline bool AckMove::has_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckMove::set_has_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckMove::clear_has_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckMove::clear_location() {
  if (location_ != NULL) location_->::MapLocation::Clear();
  clear_has_location();
}
inline const ::MapLocation& AckMove::location() const {
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::MapLocation* AckMove::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::MapLocation;
  return location_;
}
inline ::MapLocation* AckMove::release_location() {
  clear_has_location();
  ::MapLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline void AckMove::set_allocated_location(::MapLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
}

// repeated .TimeInfo info = 6;
inline int AckMove::info_size() const {
  return info_.size();
}
inline void AckMove::clear_info() {
  info_.Clear();
}
inline const ::TimeInfo& AckMove::info(int index) const {
  return info_.Get(index);
}
inline ::TimeInfo* AckMove::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::TimeInfo* AckMove::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
AckMove::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
AckMove::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// MapAddObject

// optional int32 dir = 1;
inline bool MapAddObject::has_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapAddObject::set_has_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapAddObject::clear_has_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapAddObject::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline ::google::protobuf::int32 MapAddObject::dir() const {
  return dir_;
}
inline void MapAddObject::set_dir(::google::protobuf::int32 value) {
  set_has_dir();
  dir_ = value;
}

// optional int32 curx = 2;
inline bool MapAddObject::has_curx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapAddObject::set_has_curx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapAddObject::clear_has_curx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapAddObject::clear_curx() {
  curx_ = 0;
  clear_has_curx();
}
inline ::google::protobuf::int32 MapAddObject::curx() const {
  return curx_;
}
inline void MapAddObject::set_curx(::google::protobuf::int32 value) {
  set_has_curx();
  curx_ = value;
}

// optional int32 cury = 3;
inline bool MapAddObject::has_cury() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapAddObject::set_has_cury() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapAddObject::clear_has_cury() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapAddObject::clear_cury() {
  cury_ = 0;
  clear_has_cury();
}
inline ::google::protobuf::int32 MapAddObject::cury() const {
  return cury_;
}
inline void MapAddObject::set_cury(::google::protobuf::int32 value) {
  set_has_cury();
  cury_ = value;
}

// optional int32 pixelx = 4;
inline bool MapAddObject::has_pixelx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapAddObject::set_has_pixelx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapAddObject::clear_has_pixelx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapAddObject::clear_pixelx() {
  pixelx_ = 0;
  clear_has_pixelx();
}
inline ::google::protobuf::int32 MapAddObject::pixelx() const {
  return pixelx_;
}
inline void MapAddObject::set_pixelx(::google::protobuf::int32 value) {
  set_has_pixelx();
  pixelx_ = value;
}

// optional int32 pixely = 5;
inline bool MapAddObject::has_pixely() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapAddObject::set_has_pixely() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapAddObject::clear_has_pixely() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapAddObject::clear_pixely() {
  pixely_ = 0;
  clear_has_pixely();
}
inline ::google::protobuf::int32 MapAddObject::pixely() const {
  return pixely_;
}
inline void MapAddObject::set_pixely(::google::protobuf::int32 value) {
  set_has_pixely();
  pixely_ = value;
}

// optional int64 tmpId = 6;
inline bool MapAddObject::has_tmpid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MapAddObject::set_has_tmpid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MapAddObject::clear_has_tmpid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MapAddObject::clear_tmpid() {
  tmpid_ = GOOGLE_LONGLONG(0);
  clear_has_tmpid();
}
inline ::google::protobuf::int64 MapAddObject::tmpid() const {
  return tmpid_;
}
inline void MapAddObject::set_tmpid(::google::protobuf::int64 value) {
  set_has_tmpid();
  tmpid_ = value;
}

// repeated .TimeInfo info = 7;
inline int MapAddObject::info_size() const {
  return info_.size();
}
inline void MapAddObject::clear_info() {
  info_.Clear();
}
inline const ::TimeInfo& MapAddObject::info(int index) const {
  return info_.Get(index);
}
inline ::TimeInfo* MapAddObject::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::TimeInfo* MapAddObject::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
MapAddObject::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
MapAddObject::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// MapDelObject

// optional int64 tmpId = 1;
inline bool MapDelObject::has_tmpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapDelObject::set_has_tmpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapDelObject::clear_has_tmpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapDelObject::clear_tmpid() {
  tmpid_ = GOOGLE_LONGLONG(0);
  clear_has_tmpid();
}
inline ::google::protobuf::int64 MapDelObject::tmpid() const {
  return tmpid_;
}
inline void MapDelObject::set_tmpid(::google::protobuf::int64 value) {
  set_has_tmpid();
  tmpid_ = value;
}

// repeated .TimeInfo info = 2;
inline int MapDelObject::info_size() const {
  return info_.size();
}
inline void MapDelObject::clear_info() {
  info_.Clear();
}
inline const ::TimeInfo& MapDelObject::info(int index) const {
  return info_.Get(index);
}
inline ::TimeInfo* MapDelObject::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::TimeInfo* MapDelObject::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeInfo >&
MapDelObject::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TimeInfo >*
MapDelObject::mutable_info() {
  return &info_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_move_2eproto__INCLUDED
