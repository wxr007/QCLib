// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef PROTOBUF_server_2eproto__INCLUDED
#define PROTOBUF_server_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_2eproto();
void protobuf_AssignDesc_server_2eproto();
void protobuf_ShutdownFile_server_2eproto();

class ReqLoginServer;
class AckLoginServer;
class ServerHeartBeat;

// ===================================================================

class ReqLoginServer : public ::google::protobuf::Message {
 public:
  ReqLoginServer();
  virtual ~ReqLoginServer();

  ReqLoginServer(const ReqLoginServer& from);

  inline ReqLoginServer& operator=(const ReqLoginServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLoginServer& default_instance();

  void Swap(ReqLoginServer* other);

  // implements Message ----------------------------------------------

  ReqLoginServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLoginServer& from);
  void MergeFrom(const ReqLoginServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 checkCode = 1;
  inline bool has_checkcode() const;
  inline void clear_checkcode();
  static const int kCheckCodeFieldNumber = 1;
  inline ::google::protobuf::int32 checkcode() const;
  inline void set_checkcode(::google::protobuf::int32 value);

  // optional int32 serverId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional int32 serverType = 3;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServerTypeFieldNumber = 3;
  inline ::google::protobuf::int32 servertype() const;
  inline void set_servertype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReqLoginServer)
 private:
  inline void set_has_checkcode();
  inline void clear_has_checkcode();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_servertype();
  inline void clear_has_servertype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 checkcode_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 servertype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ReqLoginServer* default_instance_;
};
// -------------------------------------------------------------------

class AckLoginServer : public ::google::protobuf::Message {
 public:
  AckLoginServer();
  virtual ~AckLoginServer();

  AckLoginServer(const AckLoginServer& from);

  inline AckLoginServer& operator=(const AckLoginServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLoginServer& default_instance();

  void Swap(AckLoginServer* other);

  // implements Message ----------------------------------------------

  AckLoginServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckLoginServer& from);
  void MergeFrom(const AckLoginServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 checkCode = 1;
  inline bool has_checkcode() const;
  inline void clear_checkcode();
  static const int kCheckCodeFieldNumber = 1;
  inline ::google::protobuf::int32 checkcode() const;
  inline void set_checkcode(::google::protobuf::int32 value);

  // optional int32 serverId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional int32 serverType = 3;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServerTypeFieldNumber = 3;
  inline ::google::protobuf::int32 servertype() const;
  inline void set_servertype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AckLoginServer)
 private:
  inline void set_has_checkcode();
  inline void clear_has_checkcode();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_servertype();
  inline void clear_has_servertype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 checkcode_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 servertype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static AckLoginServer* default_instance_;
};
// -------------------------------------------------------------------

class ServerHeartBeat : public ::google::protobuf::Message {
 public:
  ServerHeartBeat();
  virtual ~ServerHeartBeat();

  ServerHeartBeat(const ServerHeartBeat& from);

  inline ServerHeartBeat& operator=(const ServerHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerHeartBeat& default_instance();

  void Swap(ServerHeartBeat* other);

  // implements Message ----------------------------------------------

  ServerHeartBeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerHeartBeat& from);
  void MergeFrom(const ServerHeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 isNeedAck = 1;
  inline bool has_isneedack() const;
  inline void clear_isneedack();
  static const int kIsNeedAckFieldNumber = 1;
  inline ::google::protobuf::int32 isneedack() const;
  inline void set_isneedack(::google::protobuf::int32 value);

  // optional int32 checkNum = 2;
  inline bool has_checknum() const;
  inline void clear_checknum();
  static const int kCheckNumFieldNumber = 2;
  inline ::google::protobuf::int32 checknum() const;
  inline void set_checknum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerHeartBeat)
 private:
  inline void set_has_isneedack();
  inline void clear_has_isneedack();
  inline void set_has_checknum();
  inline void clear_has_checknum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 isneedack_;
  ::google::protobuf::int32 checknum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ServerHeartBeat* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqLoginServer

// optional int32 checkCode = 1;
inline bool ReqLoginServer::has_checkcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLoginServer::set_has_checkcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLoginServer::clear_has_checkcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLoginServer::clear_checkcode() {
  checkcode_ = 0;
  clear_has_checkcode();
}
inline ::google::protobuf::int32 ReqLoginServer::checkcode() const {
  return checkcode_;
}
inline void ReqLoginServer::set_checkcode(::google::protobuf::int32 value) {
  set_has_checkcode();
  checkcode_ = value;
}

// optional int32 serverId = 2;
inline bool ReqLoginServer::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLoginServer::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLoginServer::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLoginServer::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 ReqLoginServer::serverid() const {
  return serverid_;
}
inline void ReqLoginServer::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int32 serverType = 3;
inline bool ReqLoginServer::has_servertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqLoginServer::set_has_servertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqLoginServer::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqLoginServer::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::google::protobuf::int32 ReqLoginServer::servertype() const {
  return servertype_;
}
inline void ReqLoginServer::set_servertype(::google::protobuf::int32 value) {
  set_has_servertype();
  servertype_ = value;
}

// -------------------------------------------------------------------

// AckLoginServer

// optional int32 checkCode = 1;
inline bool AckLoginServer::has_checkcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckLoginServer::set_has_checkcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckLoginServer::clear_has_checkcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckLoginServer::clear_checkcode() {
  checkcode_ = 0;
  clear_has_checkcode();
}
inline ::google::protobuf::int32 AckLoginServer::checkcode() const {
  return checkcode_;
}
inline void AckLoginServer::set_checkcode(::google::protobuf::int32 value) {
  set_has_checkcode();
  checkcode_ = value;
}

// optional int32 serverId = 2;
inline bool AckLoginServer::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckLoginServer::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckLoginServer::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckLoginServer::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 AckLoginServer::serverid() const {
  return serverid_;
}
inline void AckLoginServer::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int32 serverType = 3;
inline bool AckLoginServer::has_servertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckLoginServer::set_has_servertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckLoginServer::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckLoginServer::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::google::protobuf::int32 AckLoginServer::servertype() const {
  return servertype_;
}
inline void AckLoginServer::set_servertype(::google::protobuf::int32 value) {
  set_has_servertype();
  servertype_ = value;
}

// -------------------------------------------------------------------

// ServerHeartBeat

// optional int32 isNeedAck = 1;
inline bool ServerHeartBeat::has_isneedack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerHeartBeat::set_has_isneedack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerHeartBeat::clear_has_isneedack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerHeartBeat::clear_isneedack() {
  isneedack_ = 0;
  clear_has_isneedack();
}
inline ::google::protobuf::int32 ServerHeartBeat::isneedack() const {
  return isneedack_;
}
inline void ServerHeartBeat::set_isneedack(::google::protobuf::int32 value) {
  set_has_isneedack();
  isneedack_ = value;
}

// optional int32 checkNum = 2;
inline bool ServerHeartBeat::has_checknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerHeartBeat::set_has_checknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerHeartBeat::clear_has_checknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerHeartBeat::clear_checknum() {
  checknum_ = 0;
  clear_has_checknum();
}
inline ::google::protobuf::int32 ServerHeartBeat::checknum() const {
  return checknum_;
}
inline void ServerHeartBeat::set_checknum(::google::protobuf::int32 value) {
  set_has_checknum();
  checknum_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_2eproto__INCLUDED
