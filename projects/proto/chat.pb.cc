// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  Chat_descriptor_ = file->message_type(0);
  static const int Chat_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, fromplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, fromplayeronlyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, toplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, toplayeronlyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, chatmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, info_),
  };
  Chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chat_descriptor_,
      Chat::default_instance_,
      Chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chat_descriptor_, &Chat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete Chat::default_instance_;
  delete Chat_reflection_;
}

void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\032\ntime.proto\"\264\001\n\004Chat\022\020\n\010cha"
    "tType\030\001 \001(\005\022\026\n\016fromPlayerName\030\002 \001(\t\022\030\n\020f"
    "romPlayerOnlyId\030\003 \001(\003\022\024\n\014toPlayerName\030\004 "
    "\001(\t\022\026\n\016toPlayerOnlyId\030\005 \001(\003\022\017\n\007chatMsg\030\006"
    " \001(\t\022\020\n\010vipLevel\030\007 \001(\005\022\027\n\004info\030\010 \003(\0132\t.T"
    "imeInfoB-\n\033com.sevencool.logic.netdataB\t"
    "ChatProtoZ\003ptf", 254);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  Chat::default_instance_ = new Chat();
  Chat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Chat::kChatTypeFieldNumber;
const int Chat::kFromPlayerNameFieldNumber;
const int Chat::kFromPlayerOnlyIdFieldNumber;
const int Chat::kToPlayerNameFieldNumber;
const int Chat::kToPlayerOnlyIdFieldNumber;
const int Chat::kChatMsgFieldNumber;
const int Chat::kVipLevelFieldNumber;
const int Chat::kInfoFieldNumber;
#endif  // !_MSC_VER

Chat::Chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chat::InitAsDefaultInstance() {
}

Chat::Chat(const Chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chat::SharedCtor() {
  _cached_size_ = 0;
  chattype_ = 0;
  fromplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromplayeronlyid_ = GOOGLE_LONGLONG(0);
  toplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  toplayeronlyid_ = GOOGLE_LONGLONG(0);
  chatmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chat::~Chat() {
  SharedDtor();
}

void Chat::SharedDtor() {
  if (fromplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete fromplayername_;
  }
  if (toplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete toplayername_;
  }
  if (chatmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete chatmsg_;
  }
  if (this != default_instance_) {
  }
}

void Chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chat_descriptor_;
}

const Chat& Chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Chat* Chat::default_instance_ = NULL;

Chat* Chat::New() const {
  return new Chat;
}

void Chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chattype_ = 0;
    if (has_fromplayername()) {
      if (fromplayername_ != &::google::protobuf::internal::kEmptyString) {
        fromplayername_->clear();
      }
    }
    fromplayeronlyid_ = GOOGLE_LONGLONG(0);
    if (has_toplayername()) {
      if (toplayername_ != &::google::protobuf::internal::kEmptyString) {
        toplayername_->clear();
      }
    }
    toplayeronlyid_ = GOOGLE_LONGLONG(0);
    if (has_chatmsg()) {
      if (chatmsg_ != &::google::protobuf::internal::kEmptyString) {
        chatmsg_->clear();
      }
    }
    viplevel_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chatType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fromPlayerName;
        break;
      }

      // optional string fromPlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromplayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromplayername().data(), this->fromplayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fromPlayerOnlyId;
        break;
      }

      // optional int64 fromPlayerOnlyId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromPlayerOnlyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fromplayeronlyid_)));
          set_has_fromplayeronlyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_toPlayerName;
        break;
      }

      // optional string toPlayerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toplayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->toplayername().data(), this->toplayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_toPlayerOnlyId;
        break;
      }

      // optional int64 toPlayerOnlyId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toPlayerOnlyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &toplayeronlyid_)));
          set_has_toplayeronlyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chatMsg;
        break;
      }

      // optional string chatMsg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatmsg().data(), this->chatmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_info;
        break;
      }

      // repeated .TimeInfo info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chatType = 1;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chattype(), output);
  }

  // optional string fromPlayerName = 2;
  if (has_fromplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayername().data(), this->fromplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fromplayername(), output);
  }

  // optional int64 fromPlayerOnlyId = 3;
  if (has_fromplayeronlyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->fromplayeronlyid(), output);
  }

  // optional string toPlayerName = 4;
  if (has_toplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toplayername().data(), this->toplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->toplayername(), output);
  }

  // optional int64 toPlayerOnlyId = 5;
  if (has_toplayeronlyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->toplayeronlyid(), output);
  }

  // optional string chatMsg = 6;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatmsg().data(), this->chatmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->chatmsg(), output);
  }

  // optional int32 vipLevel = 7;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viplevel(), output);
  }

  // repeated .TimeInfo info = 8;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chatType = 1;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chattype(), target);
  }

  // optional string fromPlayerName = 2;
  if (has_fromplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayername().data(), this->fromplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromplayername(), target);
  }

  // optional int64 fromPlayerOnlyId = 3;
  if (has_fromplayeronlyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->fromplayeronlyid(), target);
  }

  // optional string toPlayerName = 4;
  if (has_toplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toplayername().data(), this->toplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->toplayername(), target);
  }

  // optional int64 toPlayerOnlyId = 5;
  if (has_toplayeronlyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->toplayeronlyid(), target);
  }

  // optional string chatMsg = 6;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatmsg().data(), this->chatmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->chatmsg(), target);
  }

  // optional int32 vipLevel = 7;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->viplevel(), target);
  }

  // repeated .TimeInfo info = 8;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chatType = 1;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }

    // optional string fromPlayerName = 2;
    if (has_fromplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromplayername());
    }

    // optional int64 fromPlayerOnlyId = 3;
    if (has_fromplayeronlyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fromplayeronlyid());
    }

    // optional string toPlayerName = 4;
    if (has_toplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toplayername());
    }

    // optional int64 toPlayerOnlyId = 5;
    if (has_toplayeronlyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->toplayeronlyid());
    }

    // optional string chatMsg = 6;
    if (has_chatmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatmsg());
    }

    // optional int32 vipLevel = 7;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

  }
  // repeated .TimeInfo info = 8;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chat::MergeFrom(const Chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_fromplayername()) {
      set_fromplayername(from.fromplayername());
    }
    if (from.has_fromplayeronlyid()) {
      set_fromplayeronlyid(from.fromplayeronlyid());
    }
    if (from.has_toplayername()) {
      set_toplayername(from.toplayername());
    }
    if (from.has_toplayeronlyid()) {
      set_toplayeronlyid(from.toplayeronlyid());
    }
    if (from.has_chatmsg()) {
      set_chatmsg(from.chatmsg());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat::CopyFrom(const Chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat::IsInitialized() const {

  return true;
}

void Chat::Swap(Chat* other) {
  if (other != this) {
    std::swap(chattype_, other->chattype_);
    std::swap(fromplayername_, other->fromplayername_);
    std::swap(fromplayeronlyid_, other->fromplayeronlyid_);
    std::swap(toplayername_, other->toplayername_);
    std::swap(toplayeronlyid_, other->toplayeronlyid_);
    std::swap(chatmsg_, other->chatmsg_);
    std::swap(viplevel_, other->viplevel_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chat_descriptor_;
  metadata.reflection = Chat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
