// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: move.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "move.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ReqMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapAddObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapAddObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapDelObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapDelObject_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_move_2eproto() {
  protobuf_AddDesc_move_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "move.proto");
  GOOGLE_CHECK(file != NULL);
  ReqMove_descriptor_ = file->message_type(0);
  static const int ReqMove_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, curx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, cury_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, pixelx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, pixely_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, info_),
  };
  ReqMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMove_descriptor_,
      ReqMove::default_instance_,
      ReqMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMove));
  MapLocation_descriptor_ = file->message_type(1);
  static const int MapLocation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLocation, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLocation, curx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLocation, cury_),
  };
  MapLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapLocation_descriptor_,
      MapLocation::default_instance_,
      MapLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapLocation));
  AckMove_descriptor_ = file->message_type(2);
  static const int AckMove_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMove, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMove, pixelx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMove, pixely_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMove, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMove, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMove, info_),
  };
  AckMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckMove_descriptor_,
      AckMove::default_instance_,
      AckMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckMove));
  MapAddObject_descriptor_ = file->message_type(3);
  static const int MapAddObject_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAddObject, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAddObject, curx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAddObject, cury_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAddObject, pixelx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAddObject, pixely_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAddObject, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAddObject, info_),
  };
  MapAddObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapAddObject_descriptor_,
      MapAddObject::default_instance_,
      MapAddObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAddObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAddObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapAddObject));
  MapDelObject_descriptor_ = file->message_type(4);
  static const int MapDelObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDelObject, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDelObject, info_),
  };
  MapDelObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapDelObject_descriptor_,
      MapDelObject::default_instance_,
      MapDelObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDelObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDelObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapDelObject));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_move_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMove_descriptor_, &ReqMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapLocation_descriptor_, &MapLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckMove_descriptor_, &AckMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapAddObject_descriptor_, &MapAddObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapDelObject_descriptor_, &MapDelObject::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_move_2eproto() {
  delete ReqMove::default_instance_;
  delete ReqMove_reflection_;
  delete MapLocation::default_instance_;
  delete MapLocation_reflection_;
  delete AckMove::default_instance_;
  delete AckMove_reflection_;
  delete MapAddObject::default_instance_;
  delete MapAddObject_reflection_;
  delete MapDelObject::default_instance_;
  delete MapDelObject_reflection_;
}

void protobuf_AddDesc_move_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmove.proto\032\ntime.proto\"^\n\007ReqMove\022\014\n\004c"
    "urx\030\001 \001(\005\022\014\n\004cury\030\002 \001(\005\022\016\n\006pixelx\030\003 \001(\005\022"
    "\016\n\006pixely\030\004 \001(\005\022\027\n\004info\030\005 \003(\0132\t.TimeInfo"
    "\"8\n\013MapLocation\022\r\n\005mapId\030\001 \001(\003\022\014\n\004curx\030\002"
    " \001(\005\022\014\n\004cury\030\003 \001(\005\"\204\001\n\007AckMove\022\021\n\terrorC"
    "ode\030\001 \001(\005\022\016\n\006pixelx\030\002 \001(\005\022\016\n\006pixely\030\003 \001("
    "\005\022\r\n\005tmpId\030\004 \001(\003\022\036\n\010location\030\005 \001(\0132\014.Map"
    "Location\022\027\n\004info\030\006 \003(\0132\t.TimeInfo\"\177\n\014Map"
    "AddObject\022\013\n\003dir\030\001 \001(\005\022\014\n\004curx\030\002 \001(\005\022\014\n\004"
    "cury\030\003 \001(\005\022\016\n\006pixelx\030\004 \001(\005\022\016\n\006pixely\030\005 \001"
    "(\005\022\r\n\005tmpId\030\006 \001(\003\022\027\n\004info\030\007 \003(\0132\t.TimeIn"
    "fo\"6\n\014MapDelObject\022\r\n\005tmpId\030\001 \001(\003\022\027\n\004inf"
    "o\030\002 \003(\0132\t.TimeInfoB-\n\033com.sevencool.logi"
    "c.netdataB\tMoveProtoZ\003ptf", 545);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "move.proto", &protobuf_RegisterTypes);
  ReqMove::default_instance_ = new ReqMove();
  MapLocation::default_instance_ = new MapLocation();
  AckMove::default_instance_ = new AckMove();
  MapAddObject::default_instance_ = new MapAddObject();
  MapDelObject::default_instance_ = new MapDelObject();
  ReqMove::default_instance_->InitAsDefaultInstance();
  MapLocation::default_instance_->InitAsDefaultInstance();
  AckMove::default_instance_->InitAsDefaultInstance();
  MapAddObject::default_instance_->InitAsDefaultInstance();
  MapDelObject::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_move_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_move_2eproto {
  StaticDescriptorInitializer_move_2eproto() {
    protobuf_AddDesc_move_2eproto();
  }
} static_descriptor_initializer_move_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqMove::kCurxFieldNumber;
const int ReqMove::kCuryFieldNumber;
const int ReqMove::kPixelxFieldNumber;
const int ReqMove::kPixelyFieldNumber;
const int ReqMove::kInfoFieldNumber;
#endif  // !_MSC_VER

ReqMove::ReqMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMove::InitAsDefaultInstance() {
}

ReqMove::ReqMove(const ReqMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMove::SharedCtor() {
  _cached_size_ = 0;
  curx_ = 0;
  cury_ = 0;
  pixelx_ = 0;
  pixely_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMove::~ReqMove() {
  SharedDtor();
}

void ReqMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMove_descriptor_;
}

const ReqMove& ReqMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_move_2eproto();
  return *default_instance_;
}

ReqMove* ReqMove::default_instance_ = NULL;

ReqMove* ReqMove::New() const {
  return new ReqMove;
}

void ReqMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curx_ = 0;
    cury_ = 0;
    pixelx_ = 0;
    pixely_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 curx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curx_)));
          set_has_curx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cury;
        break;
      }

      // optional int32 cury = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cury:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cury_)));
          set_has_cury();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pixelx;
        break;
      }

      // optional int32 pixelx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixelx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixelx_)));
          set_has_pixelx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pixely;
        break;
      }

      // optional int32 pixely = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixely:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixely_)));
          set_has_pixely();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // repeated .TimeInfo info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 curx = 1;
  if (has_curx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curx(), output);
  }

  // optional int32 cury = 2;
  if (has_cury()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cury(), output);
  }

  // optional int32 pixelx = 3;
  if (has_pixelx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pixelx(), output);
  }

  // optional int32 pixely = 4;
  if (has_pixely()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pixely(), output);
  }

  // repeated .TimeInfo info = 5;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 curx = 1;
  if (has_curx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curx(), target);
  }

  // optional int32 cury = 2;
  if (has_cury()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cury(), target);
  }

  // optional int32 pixelx = 3;
  if (has_pixelx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pixelx(), target);
  }

  // optional int32 pixely = 4;
  if (has_pixely()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pixely(), target);
  }

  // repeated .TimeInfo info = 5;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 curx = 1;
    if (has_curx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curx());
    }

    // optional int32 cury = 2;
    if (has_cury()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cury());
    }

    // optional int32 pixelx = 3;
    if (has_pixelx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixelx());
    }

    // optional int32 pixely = 4;
    if (has_pixely()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixely());
    }

  }
  // repeated .TimeInfo info = 5;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMove::MergeFrom(const ReqMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curx()) {
      set_curx(from.curx());
    }
    if (from.has_cury()) {
      set_cury(from.cury());
    }
    if (from.has_pixelx()) {
      set_pixelx(from.pixelx());
    }
    if (from.has_pixely()) {
      set_pixely(from.pixely());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMove::CopyFrom(const ReqMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMove::IsInitialized() const {

  return true;
}

void ReqMove::Swap(ReqMove* other) {
  if (other != this) {
    std::swap(curx_, other->curx_);
    std::swap(cury_, other->cury_);
    std::swap(pixelx_, other->pixelx_);
    std::swap(pixely_, other->pixely_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMove_descriptor_;
  metadata.reflection = ReqMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapLocation::kMapIdFieldNumber;
const int MapLocation::kCurxFieldNumber;
const int MapLocation::kCuryFieldNumber;
#endif  // !_MSC_VER

MapLocation::MapLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapLocation::InitAsDefaultInstance() {
}

MapLocation::MapLocation(const MapLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapLocation::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  curx_ = 0;
  cury_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapLocation::~MapLocation() {
  SharedDtor();
}

void MapLocation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapLocation_descriptor_;
}

const MapLocation& MapLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_move_2eproto();
  return *default_instance_;
}

MapLocation* MapLocation::default_instance_ = NULL;

MapLocation* MapLocation::New() const {
  return new MapLocation;
}

void MapLocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = GOOGLE_LONGLONG(0);
    curx_ = 0;
    cury_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curx;
        break;
      }

      // optional int32 curx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curx_)));
          set_has_curx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cury;
        break;
      }

      // optional int32 cury = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cury:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cury_)));
          set_has_cury();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mapid(), output);
  }

  // optional int32 curx = 2;
  if (has_curx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curx(), output);
  }

  // optional int32 cury = 3;
  if (has_cury()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cury(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mapid(), target);
  }

  // optional int32 curx = 2;
  if (has_curx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curx(), target);
  }

  // optional int32 cury = 3;
  if (has_cury()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cury(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int32 curx = 2;
    if (has_curx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curx());
    }

    // optional int32 cury = 3;
    if (has_cury()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cury());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapLocation::MergeFrom(const MapLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_curx()) {
      set_curx(from.curx());
    }
    if (from.has_cury()) {
      set_cury(from.cury());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLocation::CopyFrom(const MapLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLocation::IsInitialized() const {

  return true;
}

void MapLocation::Swap(MapLocation* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(curx_, other->curx_);
    std::swap(cury_, other->cury_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapLocation_descriptor_;
  metadata.reflection = MapLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckMove::kErrorCodeFieldNumber;
const int AckMove::kPixelxFieldNumber;
const int AckMove::kPixelyFieldNumber;
const int AckMove::kTmpIdFieldNumber;
const int AckMove::kLocationFieldNumber;
const int AckMove::kInfoFieldNumber;
#endif  // !_MSC_VER

AckMove::AckMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckMove::InitAsDefaultInstance() {
  location_ = const_cast< ::MapLocation*>(&::MapLocation::default_instance());
}

AckMove::AckMove(const AckMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckMove::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  pixelx_ = 0;
  pixely_ = 0;
  tmpid_ = GOOGLE_LONGLONG(0);
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckMove::~AckMove() {
  SharedDtor();
}

void AckMove::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void AckMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckMove_descriptor_;
}

const AckMove& AckMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_move_2eproto();
  return *default_instance_;
}

AckMove* AckMove::default_instance_ = NULL;

AckMove* AckMove::New() const {
  return new AckMove;
}

void AckMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    pixelx_ = 0;
    pixely_ = 0;
    tmpid_ = GOOGLE_LONGLONG(0);
    if (has_location()) {
      if (location_ != NULL) location_->::MapLocation::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 errorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pixelx;
        break;
      }

      // optional int32 pixelx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixelx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixelx_)));
          set_has_pixelx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pixely;
        break;
      }

      // optional int32 pixely = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixely:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixely_)));
          set_has_pixely();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tmpId;
        break;
      }

      // optional int64 tmpId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmpId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_location;
        break;
      }

      // optional .MapLocation location = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_info;
        break;
      }

      // repeated .TimeInfo info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 errorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional int32 pixelx = 2;
  if (has_pixelx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pixelx(), output);
  }

  // optional int32 pixely = 3;
  if (has_pixely()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pixely(), output);
  }

  // optional int64 tmpId = 4;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->tmpid(), output);
  }

  // optional .MapLocation location = 5;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->location(), output);
  }

  // repeated .TimeInfo info = 6;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 errorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional int32 pixelx = 2;
  if (has_pixelx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pixelx(), target);
  }

  // optional int32 pixely = 3;
  if (has_pixely()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pixely(), target);
  }

  // optional int64 tmpId = 4;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->tmpid(), target);
  }

  // optional .MapLocation location = 5;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->location(), target);
  }

  // repeated .TimeInfo info = 6;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 errorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 pixelx = 2;
    if (has_pixelx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixelx());
    }

    // optional int32 pixely = 3;
    if (has_pixely()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixely());
    }

    // optional int64 tmpId = 4;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tmpid());
    }

    // optional .MapLocation location = 5;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

  }
  // repeated .TimeInfo info = 6;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckMove::MergeFrom(const AckMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_pixelx()) {
      set_pixelx(from.pixelx());
    }
    if (from.has_pixely()) {
      set_pixely(from.pixely());
    }
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
    if (from.has_location()) {
      mutable_location()->::MapLocation::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMove::CopyFrom(const AckMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMove::IsInitialized() const {

  return true;
}

void AckMove::Swap(AckMove* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(pixelx_, other->pixelx_);
    std::swap(pixely_, other->pixely_);
    std::swap(tmpid_, other->tmpid_);
    std::swap(location_, other->location_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckMove_descriptor_;
  metadata.reflection = AckMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapAddObject::kDirFieldNumber;
const int MapAddObject::kCurxFieldNumber;
const int MapAddObject::kCuryFieldNumber;
const int MapAddObject::kPixelxFieldNumber;
const int MapAddObject::kPixelyFieldNumber;
const int MapAddObject::kTmpIdFieldNumber;
const int MapAddObject::kInfoFieldNumber;
#endif  // !_MSC_VER

MapAddObject::MapAddObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapAddObject::InitAsDefaultInstance() {
}

MapAddObject::MapAddObject(const MapAddObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapAddObject::SharedCtor() {
  _cached_size_ = 0;
  dir_ = 0;
  curx_ = 0;
  cury_ = 0;
  pixelx_ = 0;
  pixely_ = 0;
  tmpid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapAddObject::~MapAddObject() {
  SharedDtor();
}

void MapAddObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapAddObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapAddObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapAddObject_descriptor_;
}

const MapAddObject& MapAddObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_move_2eproto();
  return *default_instance_;
}

MapAddObject* MapAddObject::default_instance_ = NULL;

MapAddObject* MapAddObject::New() const {
  return new MapAddObject;
}

void MapAddObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dir_ = 0;
    curx_ = 0;
    cury_ = 0;
    pixelx_ = 0;
    pixely_ = 0;
    tmpid_ = GOOGLE_LONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapAddObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curx;
        break;
      }

      // optional int32 curx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curx_)));
          set_has_curx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cury;
        break;
      }

      // optional int32 cury = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cury:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cury_)));
          set_has_cury();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pixelx;
        break;
      }

      // optional int32 pixelx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixelx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixelx_)));
          set_has_pixelx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pixely;
        break;
      }

      // optional int32 pixely = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixely:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixely_)));
          set_has_pixely();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tmpId;
        break;
      }

      // optional int64 tmpId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmpId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_info;
        break;
      }

      // repeated .TimeInfo info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapAddObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dir = 1;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dir(), output);
  }

  // optional int32 curx = 2;
  if (has_curx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curx(), output);
  }

  // optional int32 cury = 3;
  if (has_cury()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cury(), output);
  }

  // optional int32 pixelx = 4;
  if (has_pixelx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pixelx(), output);
  }

  // optional int32 pixely = 5;
  if (has_pixely()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pixely(), output);
  }

  // optional int64 tmpId = 6;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->tmpid(), output);
  }

  // repeated .TimeInfo info = 7;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapAddObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dir = 1;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dir(), target);
  }

  // optional int32 curx = 2;
  if (has_curx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curx(), target);
  }

  // optional int32 cury = 3;
  if (has_cury()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cury(), target);
  }

  // optional int32 pixelx = 4;
  if (has_pixelx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pixelx(), target);
  }

  // optional int32 pixely = 5;
  if (has_pixely()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pixely(), target);
  }

  // optional int64 tmpId = 6;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->tmpid(), target);
  }

  // repeated .TimeInfo info = 7;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapAddObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dir = 1;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dir());
    }

    // optional int32 curx = 2;
    if (has_curx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curx());
    }

    // optional int32 cury = 3;
    if (has_cury()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cury());
    }

    // optional int32 pixelx = 4;
    if (has_pixelx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixelx());
    }

    // optional int32 pixely = 5;
    if (has_pixely()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixely());
    }

    // optional int64 tmpId = 6;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tmpid());
    }

  }
  // repeated .TimeInfo info = 7;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapAddObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapAddObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapAddObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapAddObject::MergeFrom(const MapAddObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_curx()) {
      set_curx(from.curx());
    }
    if (from.has_cury()) {
      set_cury(from.cury());
    }
    if (from.has_pixelx()) {
      set_pixelx(from.pixelx());
    }
    if (from.has_pixely()) {
      set_pixely(from.pixely());
    }
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapAddObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapAddObject::CopyFrom(const MapAddObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapAddObject::IsInitialized() const {

  return true;
}

void MapAddObject::Swap(MapAddObject* other) {
  if (other != this) {
    std::swap(dir_, other->dir_);
    std::swap(curx_, other->curx_);
    std::swap(cury_, other->cury_);
    std::swap(pixelx_, other->pixelx_);
    std::swap(pixely_, other->pixely_);
    std::swap(tmpid_, other->tmpid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapAddObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapAddObject_descriptor_;
  metadata.reflection = MapAddObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapDelObject::kTmpIdFieldNumber;
const int MapDelObject::kInfoFieldNumber;
#endif  // !_MSC_VER

MapDelObject::MapDelObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapDelObject::InitAsDefaultInstance() {
}

MapDelObject::MapDelObject(const MapDelObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapDelObject::SharedCtor() {
  _cached_size_ = 0;
  tmpid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapDelObject::~MapDelObject() {
  SharedDtor();
}

void MapDelObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapDelObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapDelObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapDelObject_descriptor_;
}

const MapDelObject& MapDelObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_move_2eproto();
  return *default_instance_;
}

MapDelObject* MapDelObject::default_instance_ = NULL;

MapDelObject* MapDelObject::New() const {
  return new MapDelObject;
}

void MapDelObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmpid_ = GOOGLE_LONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapDelObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tmpId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .TimeInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapDelObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 tmpId = 1;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tmpid(), output);
  }

  // repeated .TimeInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapDelObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 tmpId = 1;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tmpid(), target);
  }

  // repeated .TimeInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapDelObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tmpId = 1;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tmpid());
    }

  }
  // repeated .TimeInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapDelObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapDelObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapDelObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapDelObject::MergeFrom(const MapDelObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapDelObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapDelObject::CopyFrom(const MapDelObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapDelObject::IsInitialized() const {

  return true;
}

void MapDelObject::Swap(MapDelObject* other) {
  if (other != this) {
    std::swap(tmpid_, other->tmpid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapDelObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapDelObject_descriptor_;
  metadata.reflection = MapDelObject_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
